import matplotlib.pyplot as plt
import numpy as np
import datetime
import seaborn as sns
from matplotlib import rcParams, ticker, font_manager

legendpro = font_manager.FontProperties(family='Times New Roman',
                                        style='oblique',
                                        size=22)

# Set the seaborn style
sns.set(style='darkgrid')

config = {
    "font.family": 'serif',
    "font.size": 24,
    "mathtext.fontset": 'stix',
    "font.serif": ['Times New Roman'],
    "figure.figsize": (6.5, 5.0),
}
rcParams.update(config)


class Plot:
    def __init__(self, round, x_axis_list=None, data_name=None):
        self.x_axis_list = x_axis_list
        self.round = round
        self.data_name = data_name
        self.line_style = ['-.D', ':*', ':x', '-.8', '1-.', '2--', '3-.']
        self.colors = ['#d62728', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f',
                       '#bcbd22', '#17becf']

    def read_result(self, file_path):
        res_dic = {}
        with open(file_path, 'r') as f:
            lines = f.readlines()
            for line in lines:
                if '[' in line:
                    key = line.strip().split(':')[0]
                    if key not in res_dic.keys():
                        res_dic[key] = (eval(line.strip().split(':')[1]))
                    else:
                        res_dic[key].extend((eval(line.strip().split(':')[1])))
        return res_dic

    def plot_exp(self, file_path, x_axis):
        res_dic = self.read_result(file_path)
        temp = {}
        error_temp = {}
        res_length = len(self.x_axis_list)

        for key in res_dic.keys():
            temp[key] = [0] * res_length
            error_temp[key] = [0] * res_length
            res = res_dic[key]
            for i in range(res_length):
                t = []
                for j in range(self.round):
                    t.append(res[i * self.round + j])
                error_temp[key][i] = np.std(t)
                temp[key][i] = np.mean(t)

        if x_axis == 0:
            self.exp_which_metric('Operation', 'ACC', temp, error_temp)

        if x_axis == 1:
            self.exp_which_metric('epsilon', 'ACC', temp, error_temp)
            self.exp_which_metric('epsilon', 'NCR', temp, error_temp)
            self.exp_which_metric('epsilon', 'VAR', temp, error_temp)

    def exp_which_metric(self, x_axis, metric, res, error_res):
        line_style_index = 0
        fig, ax = plt.subplots(constrained_layout=True)



        for key in res.keys():
            if metric == key.split()[1]:
                labels = key.split()[0]
                if labels == 'S1':
                    line_style_index = 0
                ax.errorbar(self.x_axis_list, res[key], yerr=error_res[key], capsize=5, barsabove=True,
                            fmt=self.line_style[line_style_index],
                            c=self.colors[line_style_index])
                line_style_index += 1

        plt.xticks(self.x_axis_list, fontsize=20, fontstyle='normal')
        plt.yticks(fontsize=20, fontstyle='normal')
        plt.gca().yaxis.set_major_locator(ticker.MultipleLocator(0.1))

        ylab = ''

        plt.xlabel(r'Num Of Operations', fontsize=20, fontstyle='oblique')
        ylab = r'' + metric

        plt.ylabel(ylab, fontsize=20, fontstyle='oblique')

        plt.xlim((self.x_axis_list[0] - 0.11, self.x_axis_list[-1] + 0.05))

        plt.legend(loc=4, ncol=1, frameon=False, prop=legendpro)
        plt.grid(linestyle='--')

        plt.savefig(
            './' + metric + '_' + self.data_name + '_' + x_axis + '_exp_' + str(
                datetime.datetime.now().strftime('%Y-%m-%d_%H_%M')) + '.svg')
        plt.show()


x_list = [0, 5, 10, 15, 20, 25, 30, 35, 40]
plot_epsilon = Plot(round=10, x_axis_list=x_list, data_name='Demo')
plot_epsilon.plot_exp(r'E:\研究生信息收集\论文材料\IoT-Event-Detector\Detector\Vulnerability\Data\AprioriAcc.txt', 0)
